---
# Ansible Playbook 3: Redis Setup (No Sentinel)
# Deploy Redis Master-Slave Replication without Sentinel
# Target: Redis Server VMs (redis1, redis2)
# Date: September 1, 2025
#
# Redis Configuration:
# - 2 Redis Servers in Master-Slave configuration
# - No Sentinel (simplified deployment)
# - Persistent storage with AOF and RDB
# - Docker containerized deployment with docker-compose
#
# Architecture Implementation:
# - redis1 (192.168.122.121:6379) - Redis Master (initially)
# - redis2 (192.168.122.122:6379) - Redis Slave/Backup Master
# - Manual failover when needed
# - Application integration ready
#
# Reference: Redis Official Docker Image

- name: Setup Redis Master-Slave Cluster (No Sentinel)
  hosts: redis
  become: yes
  gather_facts: yes
  vars:
    # Redis Configuration
    redis_master_name: "simple-redis-master"
    redis_port: 6379
    redis_password: "atom_redis_secure_2025"
    redis_max_memory: "1024mb"
    redis_max_memory_policy: "allkeys-lru"
    
    # Cluster Configuration
    redis_cluster_enabled: false  # Simplified without sentinel
    redis_save_enabled: true
    redis_aof_enabled: true
    
    # Redis Server IPs
    redis_servers:
      - { name: "redis1", ip: "192.168.122.121", role: "master" }
      - { name: "redis2", ip: "192.168.122.122", role: "slave" }
    
    # Docker Configuration
    docker_compose_dir: "/opt/docker/redis"
    redis_config_dir: "/opt/docker/redis/config"
    redis_data_dir: "/opt/docker/redis/data"
    redis_logs_dir: "/opt/docker/redis/logs"

  tasks:
    - name: Display Redis setup information
      debug:
        msg: |
          ===== REDIS MASTER-SLAVE SETUP =====
          Host: {{ inventory_hostname }} ({{ ansible_default_ipv4.address }})
          Role: cache
          Redis Port: {{ redis_port }}
          Initial Role: {{ 'MASTER' if inventory_hostname == 'redis1' else 'SLAVE' }}
          Max Memory: {{ redis_max_memory }}
          Sentinel: DISABLED (Simplified)
          ====================================

    - name: Verify Docker is running
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Create Redis directory structure
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: root
        group: root
      loop:
        - "{{ docker_compose_dir }}"
        - "{{ redis_config_dir }}"
        - "{{ redis_data_dir }}"
        - "{{ redis_logs_dir }}"
        - "{{ redis_data_dir }}/redis"

    - name: Set directory permissions for Redis user (UID 999)
      file:
        path: "{{ item }}"
        state: directory
        owner: "999"
        group: "999"
        mode: '0755'
        recurse: yes
      loop:
        - "{{ redis_data_dir }}"
        - "{{ redis_logs_dir }}"

    - name: Create Redis main configuration
      copy:
        content: |
          # Redis Configuration for {{ inventory_hostname }}
          # Generated by Ansible on {{ ansible_date_time.iso8601 }}

          # Network configuration
          bind 0.0.0.0
          port {{ redis_port }}
          protected-mode no
          timeout 0
          tcp-keepalive 300
          
          # Authentication
          requirepass {{ redis_password }}
          masterauth {{ redis_password }}
          
          # Memory management
          maxmemory {{ redis_max_memory }}
          maxmemory-policy {{ redis_max_memory_policy }}
          
          # Persistence - RDB snapshots
          {% if redis_save_enabled %}
          save 900 1
          save 300 10
          save 60 10000
          {% endif %}
          
          # Persistence - AOF
          {% if redis_aof_enabled %}
          appendonly yes
          appendfsync everysec
          no-appendfsync-on-rewrite no
          auto-aof-rewrite-percentage 100
          auto-aof-rewrite-min-size 64mb
          aof-load-truncated yes
          {% endif %}
          
          # Replication configuration
          {% if inventory_hostname != 'redis1' %}
          # This is a slave, configure to replicate from master
          replicaof {{ redis_servers[0].ip }} {{ redis_port }}
          replica-serve-stale-data yes
          replica-read-only yes
          replica-priority 100
          {% endif %}
          
          # Logging
          loglevel notice
          
          # Security
          rename-command FLUSHDB ""
          rename-command FLUSHALL ""
          rename-command DEBUG ""
          
          # Performance tuning
          tcp-backlog 511
          databases 16
          
          # Slow log
          slowlog-log-slower-than 10000
          slowlog-max-len 128
          
          # Client output buffer limits
          client-output-buffer-limit normal 0 0 0
          client-output-buffer-limit replica 256mb 64mb 60
          client-output-buffer-limit pubsub 32mb 8mb 60
          
          # Memory usage optimization
          hash-max-ziplist-entries 512
          hash-max-ziplist-value 64
          list-max-ziplist-size -2
          list-compress-depth 0
          set-max-intset-entries 512
          zset-max-ziplist-entries 128
          zset-max-ziplist-value 64
          
          # Advanced configuration
          hz 10
          dynamic-hz yes
          
          # Lazy freeing
          lazyfree-lazy-eviction no
          lazyfree-lazy-expire no
          lazyfree-lazy-server-del no
          replica-lazy-flush no
        dest: "{{ redis_config_dir }}/redis.conf"
        mode: '0644'

    - name: Remove old Sentinel containers and configs
      shell: |
        docker stop sentinel-{{ inventory_hostname }} 2>/dev/null || true
        docker rm -f sentinel-{{ inventory_hostname }} 2>/dev/null || true
        rm -f {{ redis_config_dir }}/sentinel.conf 2>/dev/null || true
      ignore_errors: yes

    - name: Create Redis Docker Compose file (No Sentinel)
      copy:
        content: |
          version: '3.8'

          services:
            redis:
              image: redis:7.2-alpine
              container_name: redis-{{ inventory_hostname }}
              restart: unless-stopped
              ports:
                - "{{ redis_port }}:{{ redis_port }}"
              volumes:
                - {{ redis_config_dir }}/redis.conf:/usr/local/etc/redis/redis.conf:ro
                - {{ redis_data_dir }}/redis:/data
                - {{ redis_logs_dir }}:/var/log/redis
              command: redis-server /usr/local/etc/redis/redis.conf
              networks:
                - redis_network
              environment:
                - REDIS_PASSWORD={{ redis_password }}
              healthcheck:
                test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
              labels:
                - "redis.role={{ 'master' if inventory_hostname == 'redis1' else 'slave' }}"
                - "redis.cluster={{ redis_master_name }}"
                - "redis.server={{ inventory_hostname }}"

            # Redis Commander - Web UI for Redis management
            redis-commander:
              image: rediscommander/redis-commander:latest
              container_name: redis-commander-{{ inventory_hostname }}
              restart: unless-stopped
              ports:
                - "8081:8081"
              environment:
                - REDIS_HOSTS=local:redis:{{ redis_port }}:0:{{ redis_password }}
                - HTTP_USER=admin
                - HTTP_PASSWORD=atom_redis_admin_2025
              networks:
                - redis_network
              depends_on:
                - redis

          networks:
            redis_network:
              driver: bridge
              ipam:
                config:
                  - subnet: 172.22.0.0/16

          volumes:
            redis_data:
            redis_logs:
        dest: "{{ docker_compose_dir }}/docker-compose.yml"
        mode: '0644'

    - name: Create Redis startup script
      copy:
        content: |
          #!/bin/bash
          # Redis Startup Script (No Sentinel)
          # Generated: {{ ansible_date_time.iso8601 }}
          
          echo "Starting Redis services for {{ inventory_hostname }}..."
          
          cd {{ docker_compose_dir }}
          
          # Stop any existing containers
          docker-compose down --remove-orphans
          
          # Pull latest images
          docker-compose pull
          
          # Start services
          docker-compose up -d
          
          # Show status
          echo "Waiting for services to start..."
          sleep 10
          docker-compose ps
          
          echo "Redis startup complete for {{ inventory_hostname }}"
          
          # Test connectivity
          echo "Testing Redis connectivity..."
          if docker exec redis-{{ inventory_hostname }} redis-cli -a {{ redis_password }} --no-auth-warning ping &>/dev/null; then
            echo "✅ Redis is responding to PING"
          else
            echo "❌ Redis is not responding"
          fi
          
          echo "Redis role check:"
          docker exec redis-{{ inventory_hostname }} redis-cli -a {{ redis_password }} --no-auth-warning info replication | grep role
        dest: "{{ docker_compose_dir }}/start-redis.sh"
        mode: '0755'

    - name: Create Redis monitoring script
      copy:
        content: |
          #!/bin/bash
          # Redis Monitoring Script (No Sentinel)
          echo "=== Redis Monitoring for {{ inventory_hostname }} ==="
          echo "Timestamp: $(date)"
          echo
          
          echo "Container Status:"
          docker ps | grep redis-{{ inventory_hostname }} || echo "❌ Redis container not running"
          
          echo -e "\nRedis Connectivity:"
          docker exec redis-{{ inventory_hostname }} redis-cli -a {{ redis_password }} --no-auth-warning ping 2>/dev/null || echo "❌ Redis not responding"
          
          echo -e "\nReplication Status:"
          docker exec redis-{{ inventory_hostname }} redis-cli -a {{ redis_password }} --no-auth-warning info replication
          
          echo -e "\nMemory Usage:"
          docker exec redis-{{ inventory_hostname }} redis-cli -a {{ redis_password }} --no-auth-warning info memory | grep used_memory_human
          
          echo -e "\nKeyspace Info:"
          docker exec redis-{{ inventory_hostname }} redis-cli -a {{ redis_password }} --no-auth-warning info keyspace
          
          echo -e "\nConnected Clients:"
          docker exec redis-{{ inventory_hostname }} redis-cli -a {{ redis_password }} --no-auth-warning info clients | grep connected_clients
        dest: "{{ docker_compose_dir }}/monitor-redis.sh"
        mode: '0755'

    - name: Stop existing Redis and Sentinel containers
      shell: |
        cd {{ docker_compose_dir }}
        docker-compose down --remove-orphans
        docker stop sentinel-{{ inventory_hostname }} 2>/dev/null || true
        docker rm -f sentinel-{{ inventory_hostname }} 2>/dev/null || true
      ignore_errors: yes

    - name: Start Redis services (No Sentinel)
      shell: |
        cd {{ docker_compose_dir }}
        docker-compose up -d
      register: redis_start

    - name: Wait for Redis services to be ready
      pause:
        seconds: 15

    - name: Create Redis setup completion marker
      copy:
        content: |
          Redis Setup Completed: {{ ansible_date_time.iso8601 }}
          Host: {{ inventory_hostname }}
          Role: {{ 'master' if inventory_hostname == 'redis1' else 'slave' }}
          Sentinel: DISABLED
          Status: Setup Complete - Verification will be performed in integration testing
        dest: "{{ docker_compose_dir }}/setup-complete.txt"

    - name: Display Redis setup summary
      debug:
        msg: |
          ===== REDIS SETUP SUMMARY (NO SENTINEL) =====
          Host: {{ inventory_hostname }}
          Initial Role: {{ 'MASTER' if inventory_hostname == 'redis1' else 'SLAVE' }}
          Sentinel: DISABLED (Simplified deployment)
          Redis URL: redis://:***@{{ ansible_default_ipv4.address }}:{{ redis_port }}
          Web UI: http://{{ ansible_default_ipv4.address }}:8081 (admin/atom_redis_admin_2025)
          Max Memory: {{ redis_max_memory }}
          Status: Setup Complete - Integration testing will verify functionality
          =========================================

    - name: Display next steps
      debug:
        msg: |
          ===== NEXT STEPS =====
          1. Manual failover: Promote slave to master when needed
          2. Run integration tests: 05-integration-testing.yml
          ===================
