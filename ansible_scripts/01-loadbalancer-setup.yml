---
# Ansible Playbook 1: Load Balancer Setup
# Deploy NGINX Load Balancers with KeepAlived for High Availability
# Target: Load Balancer VMs (lb1, lb2)
# Date: August 22, 2025
#
# Load Balancer Configuration:
# - 2 NGINX Load Balancers (Active-Active with KeepAlived VIP)
# - Proxy pass to application servers (app1:8080, app2:8080)
# - SSL termination at load balancer level
# - Health checks and failover capability
# - Docker containerized deployment with docker-compose
#
# Architecture Implementation:
# - lb1 (192.168.122.101) - Primary LB
# - lb2 (192.168.122.102) - Secondary LB  
# - VIP (192.168.122.100) - Virtual IP for HA
# - Backend: app1:8080, app2:8080
#
# Reference: NGINX Official Docker Image
# Reference: KeepAlived Docker Implementation

- name: Setup Load Balancer - NGINX with KeepAlived HA
  hosts: loadbalancers
  become: yes
  gather_facts: yes
  vars:
    # Load Balancer Configuration
    lb_virtual_ip: "192.168.122.100"
    lb_interface: "ens2"
    lb_priority_lb1: 110
    lb_priority_lb2: 100
    app_backend_port: 8080
    lb_external_port: 443
    lb_internal_port: 8080
    
    # Application Server Backends
    app_servers:
      - { name: "app1", ip: "192.168.122.111", port: "8080" }
      - { name: "app2", ip: "192.168.122.112", port: "8080" }
    
    # Docker Compose Configuration
    docker_compose_dir: "/opt/docker/loadbalancer"
    nginx_config_dir: "/opt/docker/loadbalancer/nginx"
    keepalived_config_dir: "/opt/docker/loadbalancer/keepalived"
    ssl_cert_dir: "/opt/docker/loadbalancer/ssl"
    
    # SSL Configuration (Self-signed for lab)
    ssl_country: "US"
    ssl_state: "CA"
    ssl_city: "LAB"
    ssl_org: "SIMPLE-LAB"
    ssl_cn: "simple-lb.local"

  tasks:
    - name: Display load balancer setup information
      debug:
        msg: |
          ===== LOAD BALANCER SETUP =====
          Host: {{ inventory_hostname }} ({{ ansible_host }})
          Role: {{ role }}
          Virtual IP: {{ lb_virtual_ip }}
          Priority: {{ lb_priority_lb1 if inventory_hostname == 'lb1' else lb_priority_lb2 }}
          Backend Servers: {{ app_servers | length }} servers
          ===============================

    - name: Verify Docker is running
      systemd:
        name: docker
        state: started
      register: docker_status

    - name: Create load balancer directory structure
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: root
        group: root
      loop:
        - "{{ docker_compose_dir }}"
        - "{{ nginx_config_dir }}"
        - "{{ nginx_config_dir }}/conf.d"
        - "{{ keepalived_config_dir }}"
        - "{{ ssl_cert_dir }}"
        - "/var/log/nginx-lb"
        - "/var/log/keepalived"

    - name: Generate self-signed SSL certificate
      shell: |
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -keyout {{ ssl_cert_dir }}/nginx.key \
          -out {{ ssl_cert_dir }}/nginx.crt \
          -subj "/C={{ ssl_country }}/ST={{ ssl_state }}/L={{ ssl_city }}/O={{ ssl_org }}/CN={{ ssl_cn }}"
      args:
        creates: "{{ ssl_cert_dir }}/nginx.crt"

    - name: Create NGINX main configuration
      copy:
        content: |
          user nginx;
          worker_processes auto;
          error_log /var/log/nginx/error.log warn;
          pid /var/run/nginx.pid;

          events {
              worker_connections 1024;
              use epoll;
              multi_accept on;
          }

          http {
              include /etc/nginx/mime.types;
              default_type application/octet-stream;

              # Logging format
              log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for" '
                            'rt=$request_time uct="$upstream_connect_time" '
                            'uht="$upstream_header_time" urt="$upstream_response_time"';

              access_log /var/log/nginx/access.log main;

              # Performance settings
              sendfile on;
              tcp_nopush on;
              tcp_nodelay on;
              keepalive_timeout 65;
              types_hash_max_size 2048;
              client_max_body_size 100M;

              # Gzip compression
              gzip on;
              gzip_vary on;
              gzip_min_length 1024;
              gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

              # Include additional configurations
              include /etc/nginx/conf.d/*.conf;
          }
        dest: "{{ nginx_config_dir }}/nginx.conf"
        mode: '0644'

    - name: Create NGINX upstream configuration
      copy:
        content: |
          # Upstream configuration for application servers
          upstream app_backend {
              least_conn;
              keepalive 32;
              
              {% for server in app_servers %}
              server {{ server.ip }}:{{ server.port }} max_fails=3 fail_timeout=30s weight=1;
              {% endfor %}
          }

          # Health check endpoint
          upstream health_check {
              {% for server in app_servers %}
              server {{ server.ip }}:{{ server.port }};
              {% endfor %}
          }
        dest: "{{ nginx_config_dir }}/conf.d/upstream.conf"
        mode: '0644'

    - name: Create NGINX server configuration
      copy:
        content: |
          # HTTP to HTTPS redirect
          server {
              listen 80;
              server_name {{ ssl_cn }} {{ lb_virtual_ip }};
              return 301 https://$server_name$request_uri;
          }

          # Main HTTPS server
          server {
              listen 443 ssl http2;
              server_name {{ ssl_cn }} {{ lb_virtual_ip }};

              # SSL Configuration
              ssl_certificate /etc/nginx/ssl/nginx.crt;
              ssl_certificate_key /etc/nginx/ssl/nginx.key;
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
              ssl_prefer_server_ciphers off;
              ssl_session_cache shared:SSL:10m;
              ssl_session_timeout 10m;

              # Security headers
              add_header X-Frame-Options DENY;
              add_header X-Content-Type-Options nosniff;
              add_header X-XSS-Protection "1; mode=block";
              add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";

              # Load balancer health check
              location /lb-health {
                  access_log off;
                  return 200 "healthy\n";
                  add_header Content-Type text/plain;
              }

              # Backend health check proxy
              location /health {
                  proxy_pass http://health_check/health;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_connect_timeout 5s;
                  proxy_send_timeout 10s;
                  proxy_read_timeout 10s;
              }

              # Main application proxy
              location / {
                  proxy_pass http://app_backend;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_set_header X-Forwarded-Port $server_port;
                  
                  # Timeouts
                  proxy_connect_timeout 30s;
                  proxy_send_timeout 30s;
                  proxy_read_timeout 30s;
                  
                  # Buffer settings
                  proxy_buffering on;
                  proxy_buffer_size 4k;
                  proxy_buffers 8 4k;
                  proxy_busy_buffers_size 8k;
                  
                  # Keep alive
                  proxy_http_version 1.1;
                  proxy_set_header Connection "";
              }
          }
        dest: "{{ nginx_config_dir }}/conf.d/default.conf"
        mode: '0644'

    - name: Create KeepAlived configuration for lb1
      copy:
        content: |
          vrrp_script chk_nginx {
              script "/usr/bin/curl -f http://localhost/lb-health || exit 1"
              interval 2
              weight -2
              fall 3
              rise 2
          }

          vrrp_instance VI_1 {
              state {{ 'MASTER' if inventory_hostname == 'lb1' else 'BACKUP' }}
              interface {{ lb_interface }}
              virtual_router_id 51
              priority {{ lb_priority_lb1 if inventory_hostname == 'lb1' else lb_priority_lb2 }}
              advert_int 1
              authentication {
                  auth_type PASS
                  auth_pass atom_lab_pass
              }
              virtual_ipaddress {
                  {{ lb_virtual_ip }}
              }
              track_script {
                  chk_nginx
              }
              notify_master "/usr/bin/echo 'MASTER' > /var/log/keepalived/state"
              notify_backup "/usr/bin/echo 'BACKUP' > /var/log/keepalived/state"
              notify_fault "/usr/bin/echo 'FAULT' > /var/log/keepalived/state"
          }
        dest: "{{ keepalived_config_dir }}/keepalived.conf"
        mode: '0644'

    - name: Create Docker Compose file for Load Balancer
      copy:
        content: |
          version: '3.8'

          services:
            nginx:
              image: nginx:1.25-alpine
              container_name: nginx-lb-{{ inventory_hostname }}
              restart: unless-stopped
              ports:
                - "80:80"
                - "443:443"
                - "{{ lb_internal_port }}:{{ lb_internal_port }}"
              volumes:
                - {{ nginx_config_dir }}/nginx.conf:/etc/nginx/nginx.conf:ro
                - {{ nginx_config_dir }}/conf.d:/etc/nginx/conf.d:ro
                - {{ ssl_cert_dir }}:/etc/nginx/ssl:ro
                - /var/log/nginx-lb:/var/log/nginx
              networks:
                - lb_network
              depends_on:
                - keepalived
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost/lb-health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s

            keepalived:
              image: osixia/keepalived:2.0.20
              container_name: keepalived-{{ inventory_hostname }}
              restart: unless-stopped
              network_mode: host
              cap_add:
                - NET_ADMIN
                - NET_BROADCAST
                - NET_RAW
              volumes:
                - {{ keepalived_config_dir }}/keepalived.conf:/usr/local/etc/keepalived/keepalived.conf:ro
                - /var/log/keepalived:/var/log/keepalived
              environment:
                - KEEPALIVED_INTERFACE={{ lb_interface }}
                - KEEPALIVED_VIRTUAL_IPS={{ lb_virtual_ip }}
                - KEEPALIVED_PRIORITY={{ lb_priority_lb1 if inventory_hostname == 'lb1' else lb_priority_lb2 }}

          networks:
            lb_network:
              driver: bridge
              ipam:
                config:
                  - subnet: 172.20.0.0/16

          volumes:
            nginx_logs:
            keepalived_logs:
        dest: "{{ docker_compose_dir }}/docker-compose.yml"
        mode: '0644'

    - name: Create load balancer startup script
      copy:
        content: |
          #!/bin/bash
          # Load Balancer Startup Script
          # Date: {{ ansible_date_time.iso8601 }}

          cd {{ docker_compose_dir }}

          echo "Starting Load Balancer services on {{ inventory_hostname }}..."
          echo "Virtual IP: {{ lb_virtual_ip }}"
          echo "Priority: {{ lb_priority_lb1 if inventory_hostname == 'lb1' else lb_priority_lb2 }}"

          # Pull latest images
          docker-compose pull

          # Start services
          docker-compose up -d

          # Wait for services to be ready
          sleep 10

          echo "Load Balancer setup completed on {{ inventory_hostname }}"
        dest: "{{ docker_compose_dir }}/start-lb.sh"
        mode: '0755'

    - name: Start Load Balancer services
      shell: |
        cd {{ docker_compose_dir }}
        docker-compose down --remove-orphans
        docker-compose up -d
      register: lb_startup

    - name: Wait for services to be ready
      pause:
        seconds: 15

    - name: Create load balancer setup completion marker
      copy:
        content: |
          Load Balancer Setup Completed
          Date: {{ ansible_date_time.iso8601 }}
          Host: {{ inventory_hostname }} ({{ ansible_host }})
          Role: {{ role }}
          Virtual IP: {{ lb_virtual_ip }}
          Priority: {{ lb_priority_lb1 if inventory_hostname == 'lb1' else lb_priority_lb2 }}
          Backend Servers: {{ app_servers | length }} configured
          Status: Setup Complete - Verification will be performed in integration testing
        dest: /opt/loadbalancer-setup-complete.txt
        mode: '0644'

  post_tasks:
    - name: Display Load Balancer setup summary
      debug:
        msg: |
          ===== LOAD BALANCER SETUP SUMMARY =====
          Host: {{ inventory_hostname }}
          Virtual IP: {{ lb_virtual_ip }}
          Priority: {{ lb_priority_lb1 if inventory_hostname == 'lb1' else lb_priority_lb2 }}
          SSL: Self-signed certificate generated
          Backend Servers: {{ app_servers | length }} configured
          Status: Setup Complete - Integration testing will verify functionality
          ======================================

    - name: Display next steps
      debug:
        msg: |
          ===== NEXT STEPS =====
          1. Run application server setup next: 02-app-setup.yml
          2. Complete full integration testing: 05-integration-testing.yml
          ====================
